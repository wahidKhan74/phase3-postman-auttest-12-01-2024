{
	"info": {
		"_postman_id": "e6323932-9a20-4b5e-a980-8bcba5154f0c",
		"name": "1. REST API Test",
		"description": "REST API testing involves evaluating the functionality of a RESTful web service by sending HTTP requests to the API and examining the responses. REST (Representational State Transfer) is an architectural style commonly used in web services, and RESTful APIs communicate over standard HTTP methods (e.g., GET, POST, PUT, DELETE). Here's a detailed description of REST API testing:\n\n### Overview:\n\nREST API testing is a crucial aspect of software testing that focuses on verifying the behavior and performance of RESTful web services. These APIs enable communication and data exchange between different systems, making them integral components of modern software architectures.\n\n### Key Aspects of REST API Testing:\n\n1. **HTTP Methods:**\n    - RESTful APIs use standard HTTP methods to perform various operations. Common methods include:\n        - GET: Retrieve information.\n        - POST: Create a new resource.\n        - PUT: Update an existing resource.\n        - DELETE: Remove a resource.\n2. **Request and Response:**\n    - Testing involves crafting HTTP requests with specific parameters, headers, and payloads to simulate different scenarios.\n    - Responses are examined for correct status codes, headers, and response bodies.\n3. **URI (Uniform Resource Identifier):**\n    - URIs are used to uniquely identify resources. Testing involves validating that URIs follow conventions and that they correctly identify resources.\n4. **Authentication and Authorization:**\n    - Testing ensures that authentication mechanisms, such as API keys or OAuth tokens, are correctly implemented.\n    - Authorization checks, ensuring that only authorized users can access certain resources, are also tested.\n5. **Data Formats:**\n    \n    - RESTful APIs often communicate using JSON or XML as data interchange formats. Testing involves validating that the API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32291673",
		"_collection_link": "https://api-aut-test-960506.postman.co/workspace/377fc758-3dc9-4942-932b-fdca9a163ec7/collection/32291673-e6323932-9a20-4b5e-a980-8bcba5154f0c?action=share&source=collection_link&creator=32291673"
	},
	"item": [
		{
			"name": "Get All users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successfull Test 200 OK\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Get varaibles from diffrent scope\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"    //access an environment variable\r",
							"    var env_host_url = pm.environment.get(\"HOST_URL\");\r",
							"    console.log(\"Env HOST_URL :: \", env_host_url);\r",
							"    \r",
							"    //access a global variable\r",
							"    var globals_host_url = pm.globals.get(\"HOST_URL\");\r",
							"    console.log(\"Globals HOST_URL :: \", globals_host_url);\r",
							"\r",
							"    //access a variable at any scope including local\r",
							"    var local_var = pm.variables.get(\"HOST_URL\");\r",
							"    console.log(\"Local HOST_URL :: \", local_var);\r",
							"\r",
							"    //access a collection variable\r",
							"    var collection_var = pm.collectionVariables.get(\"URL\");\r",
							"    console.log(\"Collection HOST_URL :: \", collection_var);\r",
							"});\r",
							"\r",
							"pm.test(\"Set varaibles in diffrent scope\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    // set environment varaibles\r",
							"    pm.environment.set(\"HOST_ADDRESS\", \"https://www.simplilearn.com\");\r",
							"    //access an environment variable\r",
							"    var env_host_url = pm.environment.get(\"HOST_ADDRESS\");\r",
							"    console.log(\"Env HOST_ADDRESS :: \", env_host_url);\r",
							"    \r",
							"    // set globals varaibles\r",
							"    pm.globals.set(\"HOST_ADDRESS\", \"https://www.gooogle.com\");\r",
							"    //access a global variable\r",
							"    var globals_host_url = pm.globals.get(\"HOST_ADDRESS\");\r",
							"    console.log(\"Globals HOST_ADDRESS :: \", globals_host_url);\r",
							"\r",
							"    //access a variable at any scope including local\r",
							"    pm.variables.set(\"HOST_ADDRESS\", \"https://www.amazon.com\");\r",
							"    var local_var = pm.variables.get(\"HOST_ADDRESS\");\r",
							"    console.log(\"Local HOST_ADDRESS :: \", local_var);\r",
							"\r",
							"    // set collections varaibles\r",
							"    pm.collectionVariables.set(\"HOST_ADDRESS\", \"https://www.facebook.com\");\r",
							"\r",
							"    //access a collection variable\r",
							"    var collection_var = pm.collectionVariables.get(\"HOST_ADDRESS\");\r",
							"    console.log(\"Collection HOST_ADDRESS :: \", collection_var);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HOST_URL}}/users?page={{PAGE}}&size={{SIZE}}&sort=acs&host_address={{HOST_ADDRESS}}",
					"host": [
						"{{HOST_URL}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "{{PAGE}}"
						},
						{
							"key": "size",
							"value": "{{SIZE}}"
						},
						{
							"key": "sort",
							"value": "acs"
						},
						{
							"key": "host_address",
							"value": "{{HOST_ADDRESS}}"
						}
					]
				},
				"description": "Retrieve a list of all users."
			},
			"response": []
		},
		{
			"name": "Get One user by userId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successfull Test 200 OK\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Get userId and should not be null\", function() {\r",
							"    var userId = pm.collectionVariables.get(\"userId\");\r",
							"    console.log(\"userId :: \", userId)\r",
							"    pm.expect(userId).to.not.null;\r",
							"    pm.expect(userId).to.equals(\"12\")\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HOST_URL}}/users/{{userId}}",
					"host": [
						"{{HOST_URL}}"
					],
					"path": [
						"users",
						"{{userId}}"
					]
				},
				"description": "Retrieve a specific user by its userId."
			},
			"response": []
		},
		{
			"name": "Create user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successfull Test 201 Created\", function() {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Get job title\", function() {\r",
							"    var jobtitle = pm.variables.get(\"RANDOM_JOB_TITLE\");\r",
							"    console.log(\"jobtitle\", jobtitle)\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.job).to.not.null;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set(\"HOST_ADDRESS\", \"www.amazon.com\");\r",
							"pm.variables.set(\"RANDOM_JOB_TITLE\",  \"{{$randomJobTitle}}\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{HOST_ADDRESS}}\",\r\n    \"job\": \"{{RANDOM_JOB_TITLE}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOST_URL}}/users",
					"host": [
						"{{HOST_URL}}"
					],
					"path": [
						"users"
					]
				},
				"description": "Create a new user."
			},
			"response": []
		},
		{
			"name": "Update user by userId",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"{{JOB_TITLE}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOST_URL}}/users/{{userId}}",
					"host": [
						"{{HOST_URL}}"
					],
					"path": [
						"users",
						"{{userId}}"
					]
				},
				"description": "Update an existing user by matching userId."
			},
			"response": []
		},
		{
			"name": "Delete user by userId",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{HOST_URL}}/users/3",
					"host": [
						"{{HOST_URL}}"
					],
					"path": [
						"users",
						"3"
					]
				},
				"description": "Delete an user by userId"
			},
			"response": []
		},
		{
			"name": "Update user job by userId",
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"job\": \"software tester\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HOST_URL}}/users/2",
					"host": [
						"{{HOST_URL}}"
					],
					"path": [
						"users",
						"2"
					]
				},
				"description": "Update a signle job fields as small patch."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "URL",
			"value": "https://reqres.in/api",
			"type": "string"
		},
		{
			"key": "HOST_ADDRESS",
			"value": ""
		},
		{
			"key": "userId",
			"value": "12"
		}
	]
}